{"version":3,"sources":["images/Logo.png","components/styled/ContainerFluid.jsx","components/styled/LogoLink.jsx","components/styled/Input.jsx","components/styled/Label.jsx","components/styled/Title.jsx","components/styled/Filter.jsx","components/styled/Content.jsx","components/styled/RightSide.jsx","components/styled/SortButtons.jsx","components/styled/SortButton.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","styled","main","href","src","logo","alt","Input","className","checkboxHandler","checkState","type","checked","onChange","defaultProps","label","h1","Filter","filter","Title","Label","all","withoutTransplant","oneTransplant","twoTransplant","threeTransplant","div","section","SortBtn","children","left","right","GlobalStyle","createGlobalStyle","App","props","newFilterState","state","filterState","setState","gettedTickets","this","console","log","ContainerFluid","Content","RightSide","SortButtons","SortButton","rigth","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a4a6a3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.d2a4807b.png\";","import styled from 'styled-components';\n\nexport default styled.main`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: #f3f7fa;\n  width: 100vw;\n  height: 100vh;\n  padding-top: 40px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport logo from '../../images/Logo.png';\n\nconst LogoLink = () => {\n  return (\n    <a href=\"https://www.aviasales.ru/\">\n      <img src={logo} alt=\"logo\" />\n    </a>\n  );\n};\n\nexport default styled(LogoLink)`\n  display: block;\n  text-decoration: none;\n  cursor: pointer;\n  width: 200px;\n  background: red;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Input = ({ className, checkboxHandler, checkState }) => {\n  return (\n    <input type=\"checkbox\" checked={checkState} className={className} onChange={checkboxHandler} />\n  );\n};\n\nexport default styled(Input)`\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  position: relative;\n  &::before,\n  &::after {\n    content: '';\n    position: absolute;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n    transition: all 0.4s ease;\n  }\n  &::before {\n    display: block;\n    width: 20px;\n    height: 20px;\n    background-color: #fff;\n    border: 1px solid ${({ checkState }) => (checkState ? '#2196F3' : '#9abbce')};\n    border-radius: 2px;\n    z-index: 10;\n  }\n  &::after {\n    display: block;\n    opacity: ${({ checkState }) => (checkState ? '1' : '0')};\n    z-index: 11;\n    width: 10px;\n    height: 6px;\n    transform: rotate(-45deg) translate(-5%, -100%);\n    border-left: 2px solid #2196f3;\n    border-bottom: 2px solid #2196f3;\n  }\n`;\n\nInput.defaultProps = {\n  className: '',\n  checkboxHandler: null,\n  checkState: false,\n};\n\nInput.propTypes = {\n  checkState: PropTypes.bool,\n  className: PropTypes.string,\n  checkboxHandler: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport default styled.label`\n  display: flex;\n  align-items: center;\n  justify-content: flex-start;\n  font-size: 14px;\n  height: 40px;\n  cursor: pointer;\n  width: 100%;\n  transition: all 0.3s ease;\n  padding-left: 20px;\n  &:hover {\n    background: #f1fcff;\n  }\n`;\n","import styled from 'styled-components';\n\nexport default styled.h1`\n  text-transform: uppercase;\n  font-size: 13px;\n  line-height: 20px;\n  margin: 0;\n  padding: 0;\n  padding-left: 20px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport Input from './Input';\nimport Label from './Label';\nimport Title from './Title';\n\nconst Filter = ({ className, checkboxHandler, filter }) => {\n  return (\n    <section className={className}>\n      <Title>количество пересадок</Title>\n      <Label>\n        <Input checkState={filter.all} checkboxHandler={checkboxHandler('all')} />\n        Все\n      </Label>\n      <Label>\n        <Input\n          checkState={filter.withoutTransplant}\n          checkboxHandler={checkboxHandler('withoutTransplant')}\n        />\n        Без пересадок\n      </Label>\n      <Label>\n        <Input\n          checkState={filter.oneTransplant}\n          checkboxHandler={checkboxHandler('oneTransplant')}\n        />\n        1 пересадка\n      </Label>\n      <Label>\n        <Input\n          checkState={filter.twoTransplant}\n          checkboxHandler={checkboxHandler('twoTransplant')}\n        />\n        2 пересадки\n      </Label>\n      <Label>\n        <Input\n          checkState={filter.threeTransplant}\n          checkboxHandler={checkboxHandler('threeTransplant')}\n        />\n        3 пересадки\n      </Label>\n    </section>\n  );\n};\n\nexport default styled(Filter)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  width: 232px;\n  height: 252px;\n  background-color: #fff;\n  color: #4a4a4a;\n  padding: 20px 0;\n  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 5px;\n`;\n\nFilter.defaultProps = {\n  className: '',\n  checkboxHandler: null,\n  filter: {\n    all: false,\n    withoutTransplant: false,\n    oneTransplant: false,\n    twoTransplant: false,\n    threeTransplant: false,\n  },\n};\n\nFilter.propTypes = {\n  filter: PropTypes.shape({\n    all: PropTypes.bool,\n    withoutTransplant: PropTypes.bool,\n    oneTransplant: PropTypes.bool,\n    twoTransplant: PropTypes.bool,\n    threeTransplant: PropTypes.bool,\n  }),\n  className: PropTypes.string,\n  checkboxHandler: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n  border: 1px solid black;\n  width: 960px;\n  height: 500px;\n  padding: 25px 90px 0;\n`;\n","import styled from 'styled-components';\n\nexport default styled.section`\n  width: 502px;\n  margin-left: 22px;\n  border: 1px solid red;\n`;\n","import styled from 'styled-components';\n\nexport default styled.div`\n  display: flex;\n`;\n","import styled from 'styled-components';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SortBtn = ({ className, children }) => {\n  return (\n    <button type=\"button\" className={className}>\n      {children}\n    </button>\n  );\n};\n\nexport default styled(SortBtn)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-weight: 600;\n  font-size: 12px;\n  letter-spacing: 2.5px;\n  cursor: pointer;\n  background: #2196f3;\n  border: 1px solid transparent;\n  border-top-left-radius: ${({ left }) => (left ? '5px' : '0px')};\n  border-bottom-left-radius: ${({ left }) => (left ? '5px' : '0px')};\n  border-top-right-radius: ${({ right }) => (right ? '50px' : '0px')};\n  border-bottom-right-radius: ${({ right }) => (right ? '5px' : '0px')};\n  // border-top-right-radius: 50px;\n  width: 252px;\n  height: 50px;\n  color: #fff;\n  text-transform: uppercase;\n`;\n\nSortBtn.defaultProps = {\n  className: '',\n  children: '',\n};\n\nSortBtn.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.string,\n};\n","import React from 'react';\nimport 'normalize.css';\nimport { createGlobalStyle } from 'styled-components';\nimport ContainerFluid from './components/styled/ContainerFluid';\nimport LogoLink from './components/styled/LogoLink';\nimport Filter from './components/styled/Filter';\nimport Content from './components/styled/Content';\nimport RightSide from './components/styled/RightSide';\nimport SortButtons from './components/styled/SortButtons';\nimport SortButton from './components/styled/SortButton';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css?family=Open+Sans&display=swap');\n\tbody {\n\t\tfont-family: 'Open Sans';\n\t}\n\t* {\n\t\tbox-sizing: border-box;\n\t}\n`;\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterState: {\n        all: false,\n        withoutTransplant: false,\n        oneTransplant: false,\n        twoTransplant: false,\n        threeTransplant: false,\n      },\n      gettedTickets: [],\n    };\n  }\n\n  checkboxHandler = type => () => {\n    const { filterState } = this.state;\n    const newFilterState = filterState;\n    newFilterState[type] = !newFilterState[type];\n    this.setState({ filterState: newFilterState });\n  };\n\n  render() {\n    const { filterState, gettedTickets } = this.state;\n    console.log(gettedTickets);\n    return (\n      <>\n        <GlobalStyle />\n        <ContainerFluid>\n          <LogoLink />\n          {/* {ttt.toString()} */}\n          <Content>\n            <Filter checkboxHandler={this.checkboxHandler} filter={filterState} />\n            <RightSide>\n              <SortButtons>\n                <SortButton left>самый дешевый</SortButton>\n                <SortButton rigth>самый быстрый</SortButton>\n              </SortButtons>\n            </RightSide>\n          </Content>\n        </ContainerFluid>\n      </>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}